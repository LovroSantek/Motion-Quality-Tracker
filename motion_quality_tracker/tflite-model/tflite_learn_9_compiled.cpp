/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 24.05.2025 16:32:17

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1456;
#else
constexpr int kTensorArenaSize = 432;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,96 } };
const TfArray<1, float> quant0_scale = { 1, { 0.078821778297424316, } };
const TfArray<1, int> quant0_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { -79, 108, -121, 57, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00065770174842327833, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data2[4*10] = { 
  31, 58, 114, -34, 13, -98, -116, -43, 127, 71, 
  94, -13, -89, -111, -92, -89, 10, 37, -80, 5, 
  -122, 91, -76, -104, 90, -95, 105, 73, 23, -75, 
  33, -21, 1, 48, 28, -53, 85, -32, -93, -121, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0055447728373110294, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[10] = { 259, -125, -34, 32, -77, 3, -44, -34, -23, -8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00039026435115374625, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[10*20] = { 
  55, -67, -70, 40, 87, 8, 100, -84, -37, -54, 22, 16, 47, 127, 64, -72, 0, -21, -63, 25, 
  -68, -100, 42, 44, 47, -42, -45, -94, -89, 0, -48, -65, 42, 3, 50, 78, -55, 29, -44, -39, 
  -23, -84, -6, 89, -42, -53, -31, 15, -37, -13, 28, 41, -22, -78, -15, -61, 71, -86, -90, -74, 
  66, 12, 93, 3, -63, 61, -49, -34, -35, 65, 85, 32, -58, -70, 9, -39, -23, -45, 92, 70, 
  -48, 52, -88, -51, -76, 64, -33, 20, -64, 53, 77, 77, -22, 33, 11, -83, -49, 86, 65, 50, 
  -77, 61, -60, 44, -27, -101, -6, 68, -101, -41, 67, 53, -44, 55, -21, -59, -32, 54, -60, 4, 
  75, 41, -61, -68, 68, 63, 9, -36, -38, 3, 55, 28, -59, -41, -2, -15, 48, -17, -17, -36, 
  -33, 79, 27, 70, -12, 68, 74, -108, 116, -15, -50, 112, 71, -17, -106, 44, 79, 4, 2, 83, 
  58, 36, 57, 29, 92, 37, -95, -8, -38, 2, 83, 15, -12, -104, -21, 83, -71, 62, -35, -26, 
  42, -62, -5, -25, 83, 107, -17, 14, 52, -98, -51, 38, -84, -75, 54, -16, -17, 75, 12, 62, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0043835765682160854, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[20] = { 204, 0, 39, 205, 118, -38, -42, -214, -91, -6, -37, 97, 167, 290, 197, 0, 1, -61, -141, 70, };
const TfArray<1, int> tensor_dimension5 = { 1, { 20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0002412229951005429, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[20*96] = { 
  10, -41, -48, 88, 52, 29, 16, -52, 17, -66, -15, 9, -77, -61, -30, 54, 8, 43, -48, -49, 50, -33, 44, 2, -52, 18, -6, -20, -33, -64, 17, 18, 43, -61, -74, 29, -48, 46, -7, -49, 29, -7, -54, -20, -65, 57, -29, 60, -32, -37, -34, -52, 42, -19, -58, 57, 83, 68, 76, 46, 34, -23, 6, -50, -13, -56, -4, 14, 53, -18, 7, -67, -21, 19, -36, -23, 61, 34, -6, 65, 28, 3, -9, 26, -11, 11, -78, -10, -57, -72, 19, -25, -44, 52, -16, -75, 
  -72, -5, 60, 9, -22, 12, 23, 22, 32, 67, -47, 31, 10, 13, 45, -39, 57, 36, 74, -44, -12, -7, 60, -14, 37, 35, -13, 53, -18, -54, -11, 68, 63, 71, 50, -23, -58, -7, 19, -33, -30, -40, 71, 51, 42, -19, 54, -51, 6, 0, -67, -8, 3, -27, -10, -74, -69, 58, 61, -59, -13, 50, -30, -13, -18, 1, 55, -73, 40, -20, 66, -42, 44, -5, 11, 60, -23, -41, -5, 65, -10, -74, -38, 0, 33, 6, -15, -53, 14, -18, 23, 23, 66, 17, 4, 41, 
  36, -18, -79, -36, 58, -42, 40, 54, 54, -21, -68, -6, -68, 20, -57, 42, 15, 39, -8, 20, 62, -78, 26, -68, -2, -18, 68, 55, -9, -67, -49, 30, 22, -70, -37, -48, -81, -27, 29, -71, 15, 18, -79, -23, 10, -30, -54, -72, 29, -3, 65, -18, -22, 4, 47, -50, 22, 26, 19, -19, 61, -33, -15, 12, -19, 40, 14, -43, -22, -24, -5, -74, -1, 82, 16, -60, -59, 40, -37, -48, 24, -49, 24, -2, 7, 12, -20, 2, -52, 4, -50, 57, 9, -33, 68, 48, 
  -37, 10, -68, 55, -5, 27, -20, 61, 28, -69, 55, 52, 26, 34, 18, -30, -73, -53, 12, 29, -64, 15, -61, -42, 73, 79, -104, 59, 66, 37, -39, 25, 60, -33, 47, 9, 70, -74, 0, 42, -65, 40, -11, 42, 58, -67, -12, -56, 70, 58, -53, 9, -9, -82, 11, -65, -75, -88, -44, -13, 67, 27, 66, 49, -53, -70, 37, -70, -54, -75, 35, -46, -20, -85, 18, 35, -21, 54, 9, 59, 5, 36, 40, -34, -28, -71, -13, -41, 30, -41, 20, 16, -68, 1, 51, -38, 
  76, -2, -17, -19, -23, -60, 59, -18, -33, 44, -26, 6, -49, -37, -58, 36, 35, 41, -12, -25, -14, 60, -23, -15, -2, -11, 66, 46, -105, -54, 40, -47, 67, -48, -21, -33, -18, -64, 16, 46, 12, 26, -63, -26, 43, -45, 55, 46, 14, 58, 44, 66, -44, -19, -17, 76, 53, 61, 64, 46, -55, -50, 71, 71, 6, 42, -29, 70, -74, -20, -67, 21, 82, 40, 12, 48, -20, -21, -34, -25, 60, -66, 39, -52, 22, -44, 15, -56, 46, -28, -32, -1, 17, 44, 19, -1, 
  -24, 68, 7, -1, -18, -57, 8, 74, -22, 20, -72, -29, -70, 37, 16, 3, -62, 21, -23, 8, -53, -59, -6, -30, 42, -54, 61, -42, -80, 77, -14, -11, 53, -47, 17, -65, 50, -40, 33, 66, 56, 35, -49, -18, 16, -67, -50, -45, -21, 63, 45, -7, 37, -38, 23, 39, 20, -11, 31, -1, 19, -66, 43, -61, -27, -7, -32, 50, 56, 25, 59, -34, 54, -45, -97, -48, -11, -7, 53, 9, -41, 38, -35, 58, -5, -56, 20, -7, 67, -19, 4, 2, -45, 55, 2, -8, 
  32, -17, -27, -43, -47, -69, -21, 55, -23, 10, 0, -2, 4, 46, 32, -9, -27, -34, 76, 60, -32, 17, -30, 51, -32, -3, 70, -63, 59, 22, 53, -65, 5, -6, -55, 46, -63, 34, -56, 77, -5, 19, -2, 6, -33, -59, 75, -36, -10, -16, -45, 57, -68, 47, 26, -5, 9, 64, 43, -23, -42, 11, 56, -41, 39, 23, -62, 50, -51, -36, 15, 69, -26, 35, 21, 40, 30, 60, 34, -30, 58, 47, 6, 25, -39, -18, 49, 22, -31, -28, -49, 49, -26, 70, -20, -68, 
  24, -54, 11, 58, 73, 30, 24, 29, -27, 57, -21, 67, -25, 30, -44, -64, -17, -31, -45, 75, 68, -41, -35, 7, -55, 39, 15, -12, -98, -12, 7, 53, 0, -78, -40, -81, -24, 10, 49, -31, -21, 14, 71, 71, 23, -11, 12, -64, -75, 51, -37, -28, -9, 18, -17, -38, -56, 60, 49, -80, -60, -32, 31, -57, 35, 16, 17, -31, -34, 73, -47, 16, -41, 23, 19, 2, -32, 57, -26, 44, 84, -66, 48, 1, 23, -67, 33, 36, 53, -21, -13, -59, 13, -39, -57, -26, 
  30, 75, 55, -22, -74, 51, -6, -45, -5, -11, 6, 46, 47, -24, 14, -30, 29, -38, 69, 14, 69, 52, 68, 34, 31, 42, 61, -27, 36, -68, 34, -86, -26, -5, -63, -27, -70, 57, -57, 2, -43, -41, -72, -36, -70, 17, -31, -11, -56, 34, -34, -84, 60, -50, 30, 27, -1, 27, -13, -37, 41, -19, 58, -29, 3, -73, 58, 49, 43, -40, -32, -21, -6, -93, -23, -75, -61, -32, -42, 60, -36, -44, -61, -41, 52, 9, -8, 19, 33, 32, -6, -66, -62, -14, 56, -7, 
  -69, 49, -30, -3, -33, 47, -67, -3, -49, -82, -66, -55, -80, -24, -50, 55, -8, 46, 50, -46, -17, 46, 12, 64, 64, 61, -12, 44, 34, 29, -36, -25, -58, -11, 40, 9, 41, 45, -15, 4, 4, 19, -43, 16, -37, -80, 40, 23, 62, -79, 57, 67, -79, -70, -46, 8, 40, 12, -59, 19, -78, -56, -57, 50, -3, -22, -73, -22, -50, 32, -45, 44, 51, 25, 8, -55, 72, -22, -78, 40, 22, 57, -68, -46, -55, 54, -53, -38, 39, 15, 57, 24, -28, -14, 3, 63, 
  68, 21, 33, -74, -61, -27, 46, 15, -2, 27, -53, 25, 23, -54, 38, -40, 2, 2, 29, 19, -60, 37, -65, 61, 58, -11, -34, -26, 49, 53, -68, -56, -55, -13, 76, 68, -18, -55, -55, 23, 31, -7, 7, -20, -21, 54, 8, -67, 40, 25, -26, -48, -16, -2, 55, 68, -46, -28, 19, -9, 22, 28, 50, 52, 21, -69, -63, 35, 36, 23, 60, 11, -19, -27, -4, 63, 18, -43, 36, 76, -28, -48, 25, -47, -29, 52, -23, 22, -25, -35, 1, 72, 37, -36, -8, 7, 
  6, 56, 94, -31, -72, -78, 60, -40, 53, -21, 53, 61, 42, 64, -30, 27, -37, -36, 59, -6, -22, -22, 67, -1, 35, 7, 71, 10, 37, 18, -19, -25, -6, -36, 14, -21, -60, 16, 11, 28, 29, 52, 52, -26, -48, -30, 10, 26, -80, 12, -62, 58, 36, -4, 34, 9, 3, -44, -23, -83, 41, 28, -21, -41, 29, 23, 27, -40, -34, -36, -78, -15, -36, -75, 39, 20, 18, 37, 11, -4, 24, 53, -82, -58, -86, -84, -65, 15, -33, 23, 14, -75, -83, -68, -1, 4, 
  -6, -61, 19, -34, 18, -76, -54, -79, -65, 31, -17, -65, 14, 34, -32, 44, -3, -38, 54, -30, 24, 33, -51, 34, 70, 12, -35, -14, 79, -31, -36, 19, -70, 67, 51, 47, 58, -49, -75, -52, -12, 6, -71, -50, -83, -38, 60, 33, 13, 68, 56, -62, -81, 2, -61, -89, -68, 2, -28, 24, -32, -62, -62, 40, 5, 12, 41, 22, -1, 43, -4, -45, 44, 13, 25, -68, -31, 38, -81, -79, -7, 15, 48, 31, 52, 41, -77, -56, -11, 33, -63, 58, 6, 5, -60, -78, 
  57, -127, -26, 3, 49, 59, -68, 70, -7, 20, 23, 29, 65, 19, -19, -64, -87, -26, -67, -36, -68, -67, -8, -37, 13, -27, -107, 96, 16, 2, 30, -54, -38, -56, 11, 35, 46, 7, 58, -18, 78, 44, 63, -54, 65, -32, -2, 41, 118, 20, -4, 56, -41, -34, 72, -27, 12, 41, 38, -4, 11, -18, -4, -54, 52, 61, 62, 61, 14, 70, -58, -19, 79, -14, 7, -32, -22, -44, 28, -48, -40, 29, -23, -32, 32, 4, 50, 55, -12, -78, 2, 13, -53, 37, -75, -63, 
  81, -91, -71, 37, 29, -49, -35, 22, 31, 20, 60, -85, -71, 62, -82, -36, -73, 1, 31, -67, 54, 61, -50, 45, -54, -76, 24, -71, 29, -15, 77, -41, -32, 49, -7, -42, -55, 20, 66, -62, -67, 69, -63, 57, -4, 51, -23, -44, -54, -28, -43, 55, 48, -9, -44, -30, 83, -5, 67, -40, 7, 36, -47, 64, 6, 60, 57, 37, -21, 30, -3, -49, 93, 3, 38, 55, -14, 25, 9, 18, 53, 21, -42, -30, 17, -58, 52, 1, -66, 9, -39, 16, -17, 34, -69, -7, 
  0, 62, -55, -69, -69, 20, -9, 12, 27, 24, -5, 28, -41, 34, 35, 57, 12, 33, 26, 44, -67, 62, -60, 32, 17, 1, -33, -27, -14, -41, 19, -26, -26, 39, -6, 16, 0, -68, 19, 65, 42, -35, 22, -53, 52, -45, -66, -18, -54, 51, 31, -6, 52, 63, 29, -42, 64, 32, -54, 62, 2, -46, 14, -32, 12, 30, 11, -44, 6, 47, -63, 60, 59, 64, 30, 53, -31, 17, 62, 27, -52, -43, 10, 69, 74, 56, 7, 38, 42, 73, -2, 73, 15, 47, 70, 52, 
  10, -38, -11, -24, 31, -27, -33, -57, 29, -60, -57, -12, 23, 41, -21, 26, -59, -40, 33, -23, -61, -41, 34, -31, 50, 16, -58, 65, -45, 44, 24, 8, 59, -41, -15, -34, 25, -58, -41, 1, 2, -16, 3, 43, -14, -63, 56, -70, 2, -32, 31, -21, -31, -60, -20, -85, -29, -35, 38, -52, -44, 67, -38, 7, -46, 41, 3, -23, 1, 73, -54, -14, -38, 30, 74, 31, -40, 8, -57, 2, 0, 56, -82, -30, -11, 46, 2, -49, 67, -19, 9, 74, 72, 18, 15, -36, 
  -18, 40, 69, 47, 49, -18, -24, 66, 30, -5, -21, 77, -21, 57, -48, -20, -47, 24, 73, -35, 44, -26, -50, 77, -45, -58, -35, 19, -10, -38, -5, -52, 6, 22, 11, 77, 75, -35, 56, -57, -65, -17, 79, -18, 27, -44, 11, 75, -61, 31, -36, -47, 65, 43, 25, -52, 57, -61, -13, -32, 25, -54, 39, 73, -12, 42, -4, 6, 27, -17, 60, -23, 42, 65, 34, 14, -61, -50, 59, -52, -55, -63, -61, 16, 42, 72, -25, 20, 20, 36, 2, 75, -64, -33, 57, 43, 
  -83, 3, 56, -78, 43, 20, -39, -3, -6, -28, -65, -26, -60, -48, -49, -32, 11, -34, -34, 38, -30, 70, -34, 63, -57, -79, 17, -24, -56, -48, 34, -37, -54, -72, 66, 48, 14, -54, -52, -25, -59, 12, -40, 44, 5, -9, 73, 17, -77, -90, 21, -73, 24, -33, 56, -46, -40, -35, -6, 52, -34, -51, -49, 58, 37, -38, 67, -54, 10, 71, 51, 43, 30, -23, -54, 15, 69, 25, -13, 27, 18, 30, 68, -1, 38, 16, 65, 12, 3, -53, -65, 63, 47, -21, -50, -49, 
  0, 70, 1, -26, 2, -31, 15, -16, 48, 44, -69, 49, 44, -6, -5, -34, -5, -66, -44, 16, -30, -72, 52, -61, -9, -21, -23, -45, 10, 54, -59, 5, 56, -51, 0, 21, -73, 14, 7, -11, -49, -51, 19, 42, 1, -60, -70, 18, -9, 6, -9, 50, -42, 19, 29, -40, 35, -66, -61, 49, -69, 40, -66, 13, -68, -21, -23, -62, -64, -55, -83, 40, -13, 14, -33, 34, -55, -75, -66, -33, 60, -5, -7, -68, -19, 20, 57, -16, 13, -7, -77, 3, -57, -24, 14, -67, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 20,96 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0030603597406297922, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.089028753340244293, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.11861653625965118, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<1, float> quant9_scale = { 1, { 0.057247195392847061, } };
const TfArray<1, int> quant9_zero = { 1, { 31 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,4 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1920, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 96), (TfLiteIntArray*)&g0::tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_9_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
